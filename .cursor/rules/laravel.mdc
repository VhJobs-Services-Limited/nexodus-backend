---
description: 
globs: 
alwaysApply: true
---
You are an expert in PHP, Laravel, and Pest.

# 1. Coding Standards
- Use PHP v8.4 features
- Follow pint.json coding rules
- Enforce strict types and array shapes via PHPStan
- Use `declare(strict_types=1);` in all PHP files
- Follow PSR-12 coding standards
- Use PHP 8.4 features when appropriate (typed properties, match expressions)
- Write concise, technical responses with accurate PHP examples

# 2. Project Structure & Architecture
- Delete .gitkeep when adding a file
- Stick to existing structureâ€”no new folders
- Avoid DB::; use Model::query() only
- No dependency changes without approval
- Use lowercase with dashes for directories (e.g., app/Http/Controllers)
- Follow Laravel's directory structure and naming conventions

## 2.1 Directory Conventions

### app/Http/Controllers
- No abstract/base controllers
- Follow RESTful naming conventions index,show,store, update and destroy
- Use dependency injection
- Keep controllers thin, delegate business logic to Actions
- Follow Laravel's REST API architecture


### app/Dtos
- Use wendelladriel/laravel-validated-dto for validation
- Name with Create, Update, Delete prefixes
- Example: CreateTodoDto, UpdateTodoDto, DeleteTodoDto
- Use Laravel's validation features for dto validation

### app/Actions
- Use Actions pattern and naming verbs
- Example:
```php
public function store(CreateTodoRequest $request, CreateTodoAction $action)
{
    $user = $request->user();
    $action->handle($user, $request->validated());
}
```

### app/Models
- Avoid fillable arrays
- Use proper type hints
- Define relationships explicitly
- Use proper return types
- Utilize Laravel's Eloquent ORM for database interactions

### database/migrations
- Omit down() in new migrations
- Use proper column types and constraints
- Follow naming conventions: YYYY_MM_DD_HHMMSS_description.php
- Implement proper database migrations and seeders

# 3. Testing
- Use Pest PHP for all tests
- Run composer lint after changes
- Run composer test before finalizing
- Don't remove tests without approval
- All code must be tested
- Generate a {Model}Factory with each model
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests
- Make sure all files are being tested

## 3.1 Test Directory Structure
- Console: tests/Feature/Console
- Controllers: tests/Feature/Http
- Actions: tests/Unit/Actions
- Models: tests/Unit/Models
- Jobs: tests/Unit/Jobs

# 5. Task Completion Requirements
- Follow all rules before marking tasks complete
- Run full test suite before committing
- Ensure all linting passes

# 6. Security Best Practices
- Use Laravel's built-in security features
- Implement proper authentication and authorization
- Use Sanctum protection
- Validate all user input
- Use proper database transactions
- Implement rate limiting where appropriate
- Use Laravel's built-in authentication scaffolding
- Implement proper error handling and logging:
  - Use Laravel's exception handling and logging features
  - Create custom exceptions when necessary
  - Use try-catch blocks for expected exceptions

# 7. Performance Guidelines
- Use eager loading for relationships
- Implement proper caching strategies
- Use database indexes appropriately
- Optimize database queries
- Use Laravel's queue system for long-running tasks
- Utilize Laravel's caching mechanisms for improved performance
- Implement proper database indexing for improved query performance
- Use Laravel's built-in pagination features

# 8. Code Quality
- Write self-documenting code
- Use meaningful variable and method names
- Keep methods small and focused
- Follow SOLID principles
- Use dependency injection
- Write comprehensive documentation
- Use proper error handling and logging
- Prefer iteration and modularization over duplication
- Favor dependency injection and service containers

# 9. Version Control
- Write meaningful commit messages
- Create feature branches for new development
- Keep commits atomic and focused
- Review code before merging
- Follow Git flow branching strategy

# 10. Deployment
- Use environment variables for configuration
- Follow deployment checklist
- Implement proper logging
- Use proper error handling
- Monitor application performance

# 11. Additional Laravel Features
- Implement API versioning for public APIs
- Use Laravel's localization features for multi-language support
- Use Laravel's event and listener system for decoupled code
- Use Laravel's built-in scheduling features for recurring tasks
- Implement proper API resource transformations
- Use Laravel's routing system for defining application endpoints

# 12. Dependencies
- Laravel (latest stable version)
- Composer for dependency management
- Pest PHP for testing
